#!/bin/bash

op=$1
remote_name=
remote_user=
remote_host=
remote_port=
project=

show_usage() {
  cat <<EOF
Usage:

  gerrit <command>

Commands:

  config [<gerrit_name>|--all]
    Show the server configurations for <gerrit_name>, or all configurations, or
    if none specified the configuration of the current project. If a
    configuration does not exist for the specified name you will have the
    option to create one.

  projects <gerrit_name>
    Display the list of projects for which you have access on the <gerrit_name>
    remote.

  clone <gerrit_name> [<project_name> [<destination_folder>]]
    Clone <project_name> from <gerrit_name> into <destination_folder>. This
    will also download and install the often forgotten commit-msg hook for the
    project.

The current working directory must be in a git repository for the following
commands.

  status
    List the open patches for which you are assigned.
    ALIAS: st

  push [<base_branch>] [--assign <reviewer> ...]
    Push the current topic branch to the remote based one <base_branch>. If the
    <base_branch> is not provided it is defaulted to master. Essentially the
    same as \`git push origin HEAD:refs/for/<base_branch>/<current_branch>\`.
    Optionally assign reviewers at the same time with the \`--assign\` argument
    followed by any ammount of usernames.
    
  draft [<base_branch]
    Same as push, but as a draft 
    (ie: refs/drafts/<base_branch>/<current_branch>)

  assign <reviewer> [<reviewer> ...]
    Assign reviewers by username to the current topic. Usernames are remembered
    within each repo and become part of tab completion suggestions.

  checkout <change_id>|<topic> [<patchset_number>]
    Fetch the patch from remote and create a branch for it of the topic name.
    If the patchset number is not provided it will automatically fetch the
    latest.
    ALIAS: co

  recheckout
    Re-checkout the current topic at the latest patchset, useful when a new
    patchset has been uploaded.
    ALIAS: reco

  review [<verified_score> <code_review_score> [<message>]]
    Give a review of the current checked out patch.

  comment [<message>]
    Post a review comment without having to give a vierified or code-review score. 

  submit [<message>]
    Submit the patch for merging with verified = 1 and code-review = 2.

  abandon [<message>]
    Abandon the patch.

  pubmit
    Same as \`gerrit push && gerrit submit "auto-submit"\`
    ALIAS: ninja
    
  ssh [<gerrit_name>] <command>
    Run a custom gerrit server command, see 
    https://review.openstack.org/Documentation/cmd-index.html#_server

  hook-install
    Install the gerrit commit-msg hook. The \`gerrit clone\` command already
    does this automatically, so this command is just in case the repro was
    cloned by some other method.
EOF
}

die() {
  echo -e "=========\n  ERROR\n========="
  echo -e "${@}"
  exit
}

ask() {

  local question=$1 default=$2

  if [[ -n $default ]]; then
    question="$question [$default]"
  fi

  read -p "$question "

  if [[ -z $REPLY ]]; then
    REPLY="$default"
  fi

}

confirm() {

  local question=$1 default=$(lowercase "$2")

  if [[ $default == "y" ]]; then
    prompt="[Y/n]"
  elif [[ $default == "n" ]]; then
    prompt="[y/N]"
  else
    die "WHAT?! confirm doesn't know '$default'"
  fi

  while true; do

    ask "$question $prompt "

    REPLY=$(lowercase "$REPLY")

    if [[ $REPLY == "yes" ]]; then
      REPLY=y
    elif [[ $REPLY == "no" ]]; then
      REPLY=n
    elif [[ -z $REPLY ]]; then
      REPLY="$default"
    fi

    if eq_regexp $REPLY "[yn]"; then
      break
    fi

  done

}

lowercase() {
  echo "$1" | tr '[A-Z]' '[a-z]'
}

uppercase() {
  echo "$1" | tr '[a-z]' '[A-Z]'
}

eq_regexp() {
  string="$1"
  regexp="$2"
  echo "$string" | grep -qE "$regexp"
}

git_branch_exists() {
  git show-ref --verify --quiet refs/heads/"$1"
}

ssh_gerrit() {
  local sshcmd="${GIT_SSH:-ssh}"

  if eq_regexp "$sshcmd" "(?i)plink[^/]*$"; then
    # plink uses uppercase 'P' for port
    "$sshcmd" -P $remote_port "$remote_user@$remote_host" "gerrit $1"
  else
    "$sshcmd" -p $remote_port "$remote_user@$remote_host" -- gerrit $1
  fi
}

get_all_gerrit_remote_names() {
  git config --global --get-regexp 'gerrit.*.host' | sed 's/^gerrit\.\(.*\)\.host.*$/\1/g'
}

get_gerrit_remote_config() {
  local name="$1"

  remote_name="$name"
  remote_user=$(git config "gerrit.$name.user")
  remote_host=$(git config "gerrit.$name.host")
  remote_port=$(git config "gerrit.$name.port")

  if [[ -z $remote_host ]]; then
    confirm "I couldn't find a config for \"$name\", would you like to create one?" 'y'
    if [[ $REPLY == "y" ]]; then
      setup_gerrit_config "$name"
    else
      exit
    fi
  fi
}

get_repo_gerrit_name() {
  # FIXME: can't assume it's always origin
  git config remote.origin.gerrit
}

get_repo_remote_config() {
  check_in_git_repo
  # FIXME: can't assume master's remote tracking will be gerrit server
  local branch=${1:-"master"}
  remote_name=$(git config "branch.$branch.remote")
  local remote_url=$(git config "remote.$remote_name.url" | sed -e 's|^ssh://||')
  remote_port=$(echo $remote_url | sed -e 's|^.*:||' -e 's|/.*$||')
  remote_host=$(echo $remote_url | sed -e 's|^.*@||' -e 's|:.*$||')
  remote_user=$(echo $remote_url | sed -e 's|@.*$||')
  project=$(echo $remote_url | sed -e 's|^[^/]*/||' -e 's|\.git||')
}

setup_gerrit_config() {
  local name="$1"

  if [[ -n $(git config --get-regexp "^gerrit.$name") ]]; then
    confirm "A gerrit remote config for \"$name\" already exists, edit?" "Y"
    if [[ $REPLY == "n" ]]; then
      exit
    fi
    get_gerrit_remote_config $name
  fi

  echo -e "\nSetting up gerrit remote config for \"$name\""

  ask "Remote Gerrit Host:" "$remote_host"
  remote_host="$REPLY"

  ask "Remote Gerrit Username:" "$remote_user"
  remote_user="$REPLY"

  ask "Remote Gerrit Port:" ${remote_port:-29418}
  remote_port="$REPLY"

  git config --global "gerrit.$name.host" "$remote_host"
  git config --global "gerrit.$name.user" "$remote_user"
  git config --global "gerrit.$name.port" "$remote_port"

  echo -e "\nSuccess!\n"
}

setup_commit_msg_hook() {

  echo "Setting up commit-msg hook..."

  local git_dir=$(git rev-parse --git-dir)

  if [[ $? -ne 0  ]]; then
    echo "Could not find .git directory to setup commit-msg hook"
    return
  fi

  local hooks_dir="$git_dir/hooks/"

  mkdir -p "$hooks_dir"

  scp -p -P "$remote_port" "$remote_user@$remote_host:hooks/commit-msg" "$hooks_dir"

}

get_projects() {
  get_gerrit_remote_config "$1"
  ssh_gerrit "ls-projects"
}

in_git_repo() {
  git rev-parse --git-dir &> /dev/null
}

check_in_git_repo() {
  if ! in_git_repo; then
    die "You must be in a git repository to run that command."
  fi
}

case $op in

  ssh)

    remote_name="$2"

    ssh_command="$3"

    if [[ -z $ssh_command ]]; then

      if ! in_git_repo; then
        die "A gerrit config name is required for this command."
      fi

      ssh_command="$remote_name"
      remote_name=$(get_repo_gerrit_name)

      if [[ -z $remote_name ]]; then
        die "A gerrit config name is required for this command."
      fi

    fi

    get_gerrit_remote_config "$remote_name"

    ssh_gerrit "$ssh_command"

    exit $?
    ;;

  pubmit|ninja)
    gerrit push && gerrit submit "auto-submit"
    ;;

  push|draft)

    check_in_git_repo

    get_repo_remote_config

    topic=$(git symbolic-ref --quiet --short HEAD)

    if [[ $op = "push" ]]; then

      type="for"

      if [[ $(git config "branch.$topic.draft") ]]; then
        confirm "Topic \"$topic\" was previously pushed as a *draft*, are you sure you want to un-draft it?" 'y'
        if [[ $REPLY = "y" ]]; then
          #TODO Unset only when push is successful?
          git config --unset "branch.$topic.draft"
        else
          die "Nothing has been pushed"
        fi
      fi

    elif [[ $op = "draft" ]]; then

      type="drafts"

      git config "branch.$topic.draft" yes

    fi

    branch=
    reviewers=

    shift

    while [[ $# -gt 0 ]]; do

      arg="$1"

      case $arg in
        --assign)
          shift
          reviewers="$@"
          break
          ;;
        *)
          branch="$arg"
          ;;
      esac

      shift

    done

    ref="refs/$type/$branch/$topic"
    if [[ -z $branch ]]; then

      branch="$(git config branch.$topic.merge)"
      ref="refs/$type/$branch/$topic"
      if [[ -z $branch ]]; then
        branch="master"
        ref="refs/$type/$branch"
      fi

    fi

    ref="refs/$type/$branch/$topic"

    echo "Pushing to $remote_name ($ref)"

    git push $remote_name "HEAD:$ref"

    if [[ -n $reviewers ]]; then
      gerrit assign $reviewers
    fi

    ;;

  config)

    all_gerrit_names="$2"

    if [[ -z $all_gerrit_names && in_git_repo ]]; then
        all_gerrit_names=$(get_repo_gerrit_name)
    fi

    if [[ -z $all_gerrit_names || $all_gerrit_names == "--all" ]]; then
      all_gerrit_names=$(get_all_gerrit_remote_names)
    fi

    if [[ -z $all_gerrit_names ]]; then
      die "A gerrit config name is required for this command."
    fi

    for gerrit_name in $all_gerrit_names; do

      get_gerrit_remote_config "$gerrit_name"

      echo "---------------"
      echo "Conf: $remote_name"
      echo "---------------"
      echo "Host: $remote_host"
      echo "User: $remote_user"
      echo "Port: $remote_port"
      echo ""

    done

    ;;

  clone)

    gerrit_name="$2"
    project="$3"
    folder="${4:-$project}"

    if [[ -z $gerrit_name ]]; then
      die "A gerrit config name is required for this command."
    fi

    get_gerrit_remote_config "$gerrit_name"

    if [[ -z $project ]]; then
      echo "Which project would you like to clone?"
      echo "[$remote_name]"
      get_projects "$remote_name" | awk '{ print "> ", $0 }'
      ask "Project:"
      if [[ -z $REPLY ]]; then exit; fi
      project="$REPLY"
      ask "Into which folder?" "$project"
      folder="$REPLY"
    fi

    if [[ -e "$folder" ]]; then
      die "File or folder $folder already exists."
    fi


    echo "Cloning project $project from $remote_name into folder $folder..."

    git clone "ssh://$remote_user@$remote_host:$remote_port/$project.git" "$folder"

    if [[ $? -eq 0 ]]; then

      cd "$folder"

      git config remote.origin.gerrit "$remote_name"

      setup_commit_msg_hook

      echo "Done!"

    fi

    ;;

  projects)

    gerrit_name="$2"

    if [[ -z $gerrit_name ]]; then
      die "A gerrit config name is required for this command."
    fi

    get_projects "$gerrit_name"

    ;;

  hook-install)

    check_in_git_repo

    get_repo_remote_config

    setup_commit_msg_hook

    ;;

  st|status)

    check_in_git_repo

    get_repo_remote_config

    query="status:open project:$project"

    if [[ $2 != "all" ]]; then
      query="$query reviewer:$remote_user"
    fi

    result=$(ssh_gerrit "query '$query'")

    number=
    owner=
    subject=
    topic=

    echo "$result" | while read line; do
      if eq_regexp "$line" "^\s*$"; then
        echo "$number [$topic] \"$subject\" ($owner)"
        number=
        owner=
        subject=
        topic=
      elif eq_regexp "$line" "number"; then
        number=$(echo $line | sed -e 's|^[^:]*: *||')
      elif eq_regexp "$line" "^name"; then
        owner=$(echo $line | sed -e 's|^[^:]*: *||')
      elif eq_regexp "$line" "^subject"; then
        subject=$(echo $line | sed -e 's|^[^:]*: *||')
      elif eq_regexp "$line" "^topic"; then
        topic=$(echo $line | sed -e 's|^[^:]*: *||')
      fi

    done

    ;;

  review|comment|submit|abandon)

    check_in_git_repo

    get_repo_remote_config

    commit=$(git rev-list --max-count=1 HEAD)

    action=
    verified=
    code_review=
    message=

    case $op in

      review)
        if [[ $# < 3 ]]; then
          ask "Verified: (-1 .. +1)"
          verified="$REPLY"

          ask "Code Review: (-2 .. +2)"
          code_review="$REPLY"

          ask "Message:"
          message="$REPLY"
        else
          verified="$2"
          code_review="$3"
          message="$4"
        fi
        ;;

      submit)
        action="--submit"
        verified=1
        code_review=2
        message="$2"
        ;;

      abandon)
        action="--abandon"
        message="$2"
        ;;

      comment)
        message="$2"
        ;;

    esac

    if [[ -n $verified ]]; then
      verified="--verified \"$verified\""
    fi

    if [[ -n $code_review ]]; then
      code_review="--code-review \"$code_review\""
    fi

    if [[ -n $message ]]; then
      message="--message \"$message\""
    fi

    ssh_gerrit "review $action --project \"$project\" $verified $code_review $message $commit"

    ;;

  assign)

    check_in_git_repo

    get_repo_remote_config

    commit=$(git rev-list --max-count=1 HEAD)

    shift

   while [[ $# -gt 0 ]]; do

      reviewer="$1"

      ssh_gerrit "set-reviewers --add \"$reviewer\" -- $commit"

      if [[ $? -eq 0 ]]; then

        echo "Assigned reviewer $reviewer"

        if ! git config --get-all gerrit.reviewers | grep "^$reviewer$"; then
          git config --add gerrit.reviewers "$reviewer"
        fi

      else 

        echo "Error while assigning reviewer $reviewer"

      fi

      shift

    done

    ;;

  checkout|co|recheckout|reco)

    is_reco=
    if eq_regexp $op "recheckout|reco"; then
      is_reco="yes"
    fi

    check_in_git_repo

    get_repo_remote_config

    if [[ $is_reco ]]; then
      target=$(git symbolic-ref HEAD | cut -d'/' -f 3)
    else 
      target=$2
    fi

    if eq_regexp $target "^[0-9]+$"; then

      change_id=$target

      query_result=$(ssh_gerrit "query $change_id")

      rowCount=$(echo "$query_result" | awk -F':' '/^rowCount/ { print $2 }')

      if [[ $rowCount -eq 0 ]]; then
        die "Could not find change id \"$target\""
      fi

      topic=$(echo "$query_result" | awk -F ':' '/^ *topic/ { print $2 }' | tr -d ' ')
      if [[ -z $topic ]]; then
        echo "WARNING: No topic found for this patch, you will be checked-out in a detached head."
      fi

    else 

      topic=$target

      change_id=$(ssh_gerrit "query project:$project topic:$topic limit:1" | awk -F ':' '/^ *number/ { print $2; exit; }' | tr -d ' ')

      if [[ -z $change_id ]]; then
        die "Could not find topic \"$target\""
      fi

    fi

    hash=$(($change_id % 100))
    case $hash in
      [0-9]) hash="0$hash" ;;
    esac

    ref="refs/changes/$hash/$change_id"

    if [[ $is_reco && $# -ge 2 ]]; then
      patch_id=$2
    elif [[ $# -ge 3 ]]; then
      patch_id=$3
    else
      echo "Getting latest patchset..."
      patch_id=$(git ls-remote $remote_name "$ref/*" | sed -n 's|.*/||p' | sort -n | tail -n 1)
    fi

    ref="$ref/$patch_id"

    echo "Refspec is $ref"

    git fetch $remote_name $ref

    if [ $? -eq 0 ]; then

      # TODO: Ensure no changes before changing branch
      if [[ $topic == "master" ]]; then

        echo "Patch topic is \"master\", therefore staying on detached head."

      elif [[ -n "$topic" ]] && git_branch_exists "$topic"; then

        if [[ $is_reco ]]; then
          REPLY='y'
        else
          ask "Branch with name $topic already exists, overwrite?"
        fi

        if [[ $REPLY == 'y' ]]; then
          git checkout master
          git branch -D "$topic"
        fi

      fi

      if [[ -z $topic ]] || git_branch_exists "$topic"; then
        git checkout FETCH_HEAD
      else
        git checkout -b $topic FETCH_HEAD
      fi

    fi

    ;;

  *)
    show_usage
    ;;

esac
